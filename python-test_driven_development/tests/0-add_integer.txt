  The ``0-add_integer`` module
  =========================

  using ``add_integer``
  --------------------

First import the function from the module to test
>>> add_integer = __import__("0-add_integer").add_integer

Success case:

Test for module docstring:
    >>> m = __import__("0-add_integer").__doc__
    >>> len(m) > 1
    True

Test for function docstring:
    >>> m = __import__("0-add_integer").add_integer.__doc__ 
    >>> len(m) > 1 
    True

Test signed and unsigned int and floats:
    >>> add_integer(2, 4)
    6
    >>> add_integer(-2, 4.2)
    2
    >>> add_integer(2.3, 4.3) 
    6
    >>> add_integer(-2.4, 5)
    3

Test default b=98 value
    >>> add_integer(2)
    100
 
Test additon over multiple lines:
    >>> [add_integer(i, i * 2) for i in range(5)]
    [0, 3, 6, 9, 12]
    >>>

Test for super long int:
    >>> add_integer(999999999999999999999999999999999999999999999, 1)
    1000000000000000000000000000000000000000000000

Falied case:

Test no arg:
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
    >>> add_integer(None, None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test for non- number arguments:
    >>> add_integer(1, "two")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer
    >>> add_integer([1, 3], "two")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
    >>> add_integer((3, 6), {"number":4})
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test boolean with number:
    >>> add_integer(True, 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test boolean with number:
    >>> add_integer(True, 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
    >>> add_integer(1, True)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Test more han two arguments:
    >>> add_integer(1, 2, 3)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test float('nan') in python (not a number):
    >>> add_integer(1, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Test max or min numbers python can handle:
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
    >>> add_integer(float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
